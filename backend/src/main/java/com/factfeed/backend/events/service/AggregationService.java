package com.factfeed.backend.events.service;

import com.factfeed.backend.ai.entity.ApiUsageLog;
import com.factfeed.backend.ai.repository.ApiUsageLogRepository;
import com.factfeed.backend.ai.service.ApiUsageMonitoringService;
import com.factfeed.backend.db.entity.Article;
import com.factfeed.backend.events.dto.AggregationResult;
import com.factfeed.backend.events.dto.ArticleContentForAggregation;
import com.factfeed.backend.events.entity.Event;
import com.factfeed.backend.events.repository.ArticleEventMappingRepository;
import com.factfeed.backend.events.repository.EventRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.chat.prompt.PromptTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
public class AggregationService {

    private static final String AGGREGATION_PROMPT = """
            ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï‡•§ ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶è‡¶ï‡¶á ‡¶ò‡¶ü‡¶®‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡¶™‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
            
            **‡¶ï‡¶æ‡¶ú:**
            1. **‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂:** ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó, ‡¶®‡¶ø‡¶∞‡¶™‡ßá‡¶ï‡ßç‡¶∑ ‡¶ì ‡¶§‡¶•‡ßç‡¶Ø‡¶¨‡¶π‡ßÅ‡¶≤ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (‡ßß‡ß¶-‡ßß‡ß´ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø)
            2. **‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶:** ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶Ö‡¶∏‡¶ô‡ßç‡¶ó‡¶§‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßÅ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
            3. **‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶∏‡ßç‡¶ï‡ßã‡¶∞:** ‡ß¶.‡ß¶ ‡¶•‡ßá‡¶ï‡ßá ‡ßß.‡ß¶ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞ ‡¶¶‡¶ø‡¶® (‡ßß.‡ß¶ = ‡¶∏‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£)
            
            **‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
            - ‡¶∏‡ßÅ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶π ‡¶â‡ßé‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®
            - ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: "‡¶Æ‡ßÉ‡¶§‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Æ‡¶§‡¶≠‡ßá‡¶¶ - ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶≤‡ßã: ‡ß® ‡¶ú‡¶®, ‡¶∏‡¶Æ‡¶ï‡¶æ‡¶≤: ‡ßß ‡¶ú‡¶®"
            - ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: "‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ - ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ï‡¶£‡ßç‡¶†: ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ßß‡ß¶‡¶ü‡¶æ, ‡¶ú‡¶®‡¶ï‡¶£‡ßç‡¶†: ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ßß‡ßß‡¶ü‡¶æ"
            - ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá: "‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø"
            
            **‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
            - ‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶•‡ßç‡¶Ø, ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ, ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ, ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
            - ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡¶™‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶™‡¶ï‡ßç‡¶∑‡¶™‡¶æ‡¶§‡¶ø‡¶§‡ßç‡¶¨ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ
            - ‡¶™‡¶∞‡¶∏‡ßç‡¶™‡¶∞‡¶¨‡¶ø‡¶∞‡ßã‡¶ß‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßÅ‡¶≤‡ßá ‡¶ß‡¶∞‡ßÅ‡¶®
            
            **Input Articles:** {inputJson}
            
            ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶á exact JSON format ‡¶è ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®:
            {{
              "aggregatedSummary": "‡¶∏‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ (‡ßß‡ß¶-‡ßß‡ß´ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø)",
              "discrepancies": "‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ (‡¶â‡ßé‡¶∏ ‡¶∏‡¶π) ‡¶¨‡¶æ '‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø'",
              "confidenceScore": 0.92,
              "methodology": "‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶á ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£"
            }}
            """;

    private final ChatModel chatModel;
    private final EventRepository eventRepository;
    private final ArticleEventMappingRepository mappingRepository;
    private final ApiUsageLogRepository apiUsageLogRepository;
    private final ApiUsageMonitoringService monitoringService;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final AtomicInteger keyIndex = new AtomicInteger(0);

    // API keys for rotation
    @Value("${secret.api.key1}")
    private String apiKey1;
    @Value("${secret.api.key2}")
    private String apiKey2;
    @Value("${secret.api.key3}")
    private String apiKey3;
    @Value("${secret.api.key4}")
    private String apiKey4;
    @Value("${secret.api.key5}")
    private String apiKey5;
    @Value("${secret.api.key6}")
    private String apiKey6;

    /**
     * Process all unprocessed events for aggregation
     */
    @Transactional
    public String processAllUnprocessedEvents() {
        List<Event> unprocessedEvents = eventRepository.findByIsProcessed(false);
        log.info("üîç Found {} unprocessed events for aggregation", unprocessedEvents.size());

        if (unprocessedEvents.isEmpty()) {
            return "‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ó‡ßç‡¶∞‡¶ø‡¶ó‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶®‡ßá‡¶á";
        }

        int processedCount = 0;
        int errorCount = 0;
        int skippedCount = 0;

        for (Event event : unprocessedEvents) {
            try {
                log.info("üîÑ Processing event: {} (ID: {}, Articles: {})",
                        event.getTitle(), event.getId(), event.getArticleCount());

                // Handle single-article events differently
                if (event.getArticleCount() == 1) {
                    processSingleArticleEvent(event);
                    processedCount++;
                    log.info("‚úÖ Processed single-article event: {}", event.getTitle());
                } else {
                    AggregationResult result = processEventAggregation(event);
                    updateEventWithAggregation(event, result);
                    processedCount++;
                    log.info("‚úÖ Successfully processed multi-article event: {}", event.getTitle());
                }

                // Small delay between events to respect rate limits
                Thread.sleep(1000); // Reduced delay for faster processing

            } catch (Exception e) {
                log.error("‚ùå Error processing event {}: {}", event.getId(), e.getMessage());
                errorCount++;
            }
        }

        String result = String.format("‡¶è‡¶ó‡ßç‡¶∞‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® - ‡¶∏‡¶´‡¶≤: %d, ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: %d, ‡¶è‡¶°‡¶º‡¶æ‡¶®‡ßã: %d",
                processedCount, errorCount, skippedCount);
        log.info("üìà Event aggregation completed: {}", result);
        return result;
    }

    /**
     * Process single-article events (no aggregation needed)
     */
    @Transactional
    public void processSingleArticleEvent(Event event) {
        List<Article> articles = mappingRepository.findArticlesByEvent(event);

        if (articles.size() == 1) {
            Article article = articles.get(0);

            // Use the article's summarized content as aggregated summary
            event.setAggregatedSummary("‡¶è‡¶ï‡¶ï ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶: " +
                    (article.getSummarizedContent() != null ? article.getSummarizedContent() : article.getTitle()));
            event.setDiscrepancies("‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø‡¶ó‡¶§ ‡¶¨‡¶ø‡¶≠‡ßá‡¶¶ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø (‡¶è‡¶ï‡¶ï ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶)");
            event.setConfidenceScore(0.8); // Good confidence for single article
            event.setIsProcessed(true);
            event.setUpdatedAt(LocalDateTime.now());

            eventRepository.save(event);
            log.debug("üíæ Updated single-article event {} with basic aggregation", event.getId());
        }
    }

    /**
     * Process a single event for aggregation
     */
    @Transactional
    public AggregationResult processEventAggregation(Event event) {
        String apiKeyName = getNextApiKey();
        log.info("ü§ñ Processing aggregation for event '{}' using key: {}", event.getTitle(), apiKeyName);

        try {
            // Get all articles for this event
            List<Article> articles = mappingRepository.findArticlesByEvent(event);

            if (articles.size() < 2) {
                throw new RuntimeException("Event must have at least 2 articles for aggregation");
            }

            // Convert articles to aggregation format
            List<ArticleContentForAggregation> articleContents = articles.stream()
                    .map(this::convertToAggregationFormat)
                    .collect(Collectors.toList());

            // Create input JSON
            String inputJson = objectMapper.writeValueAsString(articleContents);
            int tokenCount = estimateTokenCount(inputJson);

            log.debug("üìù Aggregation input created for {} articles, estimated tokens: {}", articles.size(), tokenCount);

            // Create prompt and call AI
            PromptTemplate promptTemplate = new PromptTemplate(AGGREGATION_PROMPT);
            Prompt prompt = promptTemplate.create(Map.of("inputJson", inputJson));

            ChatResponse response = chatModel.call(prompt);
            String aiResponse = response.getResult().getOutput().getText().trim();

            log.debug("ü§ñ AI Aggregation Response received: {}", aiResponse.substring(0, Math.min(200, aiResponse.length())));

            // Parse AI response
            AggregationResult result = parseAggregationResponse(aiResponse);

            // Log successful API usage
            logApiUsage(apiKeyName, event.getId(), tokenCount, true, null);

            log.info("‚úÖ Successfully processed aggregation for event '{}'", event.getTitle());
            return result;

        } catch (Exception e) {
            log.error("‚ùå Error in aggregation for event {}: {}", event.getId(), e.getMessage());
            logApiUsage(apiKeyName, event.getId(), estimateTokenCount("single_event"), false, e.getMessage());
            throw new RuntimeException("‡¶è‡¶ó‡ßç‡¶∞‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: " + e.getMessage(), e);
        }
    }

    /**
     * Get aggregation statistics
     */
    public Map<String, Object> getAggregationStats() {
        Long totalEvents = eventRepository.count();
        Long processedEvents = eventRepository.countByIsProcessed(true);
        Long unprocessedEvents = eventRepository.countByIsProcessed(false);

        Double averageConfidence = eventRepository.getAverageConfidenceScore();
        Double averageArticleCount = eventRepository.getAverageArticleCountPerEvent();

        // Recent activity
        LocalDateTime since24h = LocalDateTime.now().minusHours(24);
        Long recentEvents = eventRepository.countEventsSince(since24h);

        return Map.of(
                "totalEvents", totalEvents != null ? totalEvents : 0,
                "processedEvents", processedEvents != null ? processedEvents : 0,
                "unprocessedEvents", unprocessedEvents != null ? unprocessedEvents : 0,
                "averageConfidenceScore", averageConfidence != null ? Math.round(averageConfidence * 100.0) / 100.0 : 0.0,
                "averageArticleCount", averageArticleCount != null ? Math.round(averageArticleCount * 100.0) / 100.0 : 0.0,
                "recentEventsLast24h", recentEvents != null ? recentEvents : 0,
                "processingPercentage", totalEvents != null && totalEvents > 0 ? Math.round((double) processedEvents / totalEvents * 100) : 0
        );
    }

    // Private helper methods

    private String getNextApiKey() {
        return monitoringService.getNextAvailableApiKey("AGGREGATION");
    }

    private ArticleContentForAggregation convertToAggregationFormat(Article article) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return new ArticleContentForAggregation(
                article.getId(),
                article.getTitle(),
                article.getContent(),
                article.getSource().name(),
                article.getArticlePublishedAt() != null ? article.getArticlePublishedAt().format(formatter) : "",
                article.getUrl()
        );
    }

    private AggregationResult parseAggregationResponse(String aiResponse) throws JsonProcessingException {
        // Clean response - remove markdown if present
        String cleanedResponse = aiResponse;
        if (cleanedResponse.contains("```json")) {
            cleanedResponse = cleanedResponse.substring(cleanedResponse.indexOf("```json") + 7);
        }
        if (cleanedResponse.contains("```")) {
            cleanedResponse = cleanedResponse.substring(0, cleanedResponse.lastIndexOf("```"));
        }
        cleanedResponse = cleanedResponse.trim();

        try {
            JsonNode jsonNode = objectMapper.readTree(cleanedResponse);

            return new AggregationResult(
                    jsonNode.get("aggregatedSummary").asText(),
                    jsonNode.get("discrepancies").asText(),
                    jsonNode.get("confidenceScore").asDouble(),
                    jsonNode.get("methodology").asText()
            );

        } catch (Exception e) {
            log.error("Failed to parse AI aggregation response: {}", cleanedResponse);
            throw new RuntimeException("AI aggregation response parsing failed: " + e.getMessage());
        }
    }

    private void updateEventWithAggregation(Event event, AggregationResult result) {
        event.setAggregatedSummary(result.getAggregatedSummary());
        event.setDiscrepancies(result.getDiscrepancies());
        event.setConfidenceScore(result.getConfidenceScore());
        event.setIsProcessed(true);
        event.setUpdatedAt(LocalDateTime.now());

        eventRepository.save(event);
        log.debug("üíæ Updated event {} with aggregation results", event.getId());
    }

    private void logApiUsage(String apiKeyName, Long eventId, Integer tokenCount, Boolean success, String errorMessage) {
        try {
            ApiUsageLog logEntry = ApiUsageLog.builder()
                    .apiKeyName(apiKeyName)
                    .operation("AGGREGATION")
                    .articleId(eventId) // Using this field to store event ID for aggregation operations
                    .tokenCount(tokenCount)
                    .success(success)
                    .errorMessage(errorMessage)
                    .build();

            apiUsageLogRepository.save(logEntry);

        } catch (Exception e) {
            log.error("Failed to log API usage: {}", e.getMessage());
        }
    }

    private int estimateTokenCount(String text) {
        // Rough estimation: 1 token ‚âà 4 characters for Bangla text
        return Math.max(1, text.length() / 4);
    }
}